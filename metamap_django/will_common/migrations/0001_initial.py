# -*- coding: utf-8 -*-
# Generated by Django 1.10.2 on 2016-11-11 07:16
from __future__ import unicode_literals

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='AuthGroup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=80, unique=True)),
            ],
            options={
                'db_table': 'auth_group',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthGroupPermissions',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'db_table': 'auth_group_permissions',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthPermission',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('codename', models.CharField(max_length=100)),
            ],
            options={
                'db_table': 'auth_permission',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128)),
                ('last_login', models.DateTimeField(blank=True, null=True)),
                ('is_superuser', models.IntegerField()),
                ('username', models.CharField(max_length=30, unique=True)),
                ('first_name', models.CharField(max_length=30)),
                ('last_name', models.CharField(max_length=30)),
                ('email', models.CharField(max_length=254)),
                ('is_staff', models.IntegerField()),
                ('is_active', models.IntegerField()),
                ('date_joined', models.DateTimeField()),
            ],
            options={
                'db_table': 'auth_user',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthUserGroups',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'db_table': 'auth_user_groups',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthUserUserPermissions',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'db_table': 'auth_user_user_permissions',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CeleryTaskmeta',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('task_id', models.CharField(max_length=255, unique=True)),
                ('status', models.CharField(max_length=50)),
                ('result', models.TextField(blank=True, null=True)),
                ('date_done', models.DateTimeField()),
                ('traceback', models.TextField(blank=True, null=True)),
                ('hidden', models.IntegerField()),
                ('meta', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'celery_taskmeta',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CeleryTasksetmeta',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('taskset_id', models.CharField(max_length=255, unique=True)),
                ('result', models.TextField()),
                ('date_done', models.DateTimeField()),
                ('hidden', models.IntegerField()),
            ],
            options={
                'db_table': 'celery_tasksetmeta',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoAdminLog',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action_time', models.DateTimeField()),
                ('object_id', models.TextField(blank=True, null=True)),
                ('object_repr', models.CharField(max_length=200)),
                ('action_flag', models.SmallIntegerField()),
                ('change_message', models.TextField()),
            ],
            options={
                'db_table': 'django_admin_log',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoContentType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('app_label', models.CharField(max_length=100)),
                ('model', models.CharField(max_length=100)),
            ],
            options={
                'db_table': 'django_content_type',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoMigrations',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('app', models.CharField(max_length=255)),
                ('name', models.CharField(max_length=255)),
                ('applied', models.DateTimeField()),
            ],
            options={
                'db_table': 'django_migrations',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoSession',
            fields=[
                ('session_key', models.CharField(max_length=40, primary_key=True, serialize=False)),
                ('session_data', models.TextField()),
                ('expire_date', models.DateTimeField()),
            ],
            options={
                'db_table': 'django_session',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjceleryCrontabschedule',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('minute', models.CharField(max_length=64)),
                ('hour', models.CharField(max_length=64)),
                ('day_of_week', models.CharField(max_length=64)),
                ('day_of_month', models.CharField(max_length=64)),
                ('month_of_year', models.CharField(max_length=64)),
            ],
            options={
                'db_table': 'djcelery_crontabschedule',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjceleryIntervalschedule',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('every', models.IntegerField()),
                ('period', models.CharField(max_length=24)),
            ],
            options={
                'db_table': 'djcelery_intervalschedule',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjceleryPeriodictasks',
            fields=[
                ('ident', models.SmallIntegerField(primary_key=True, serialize=False)),
                ('last_update', models.DateTimeField()),
            ],
            options={
                'db_table': 'djcelery_periodictasks',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjceleryTaskstate',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('state', models.CharField(max_length=64)),
                ('task_id', models.CharField(max_length=36, unique=True)),
                ('name', models.CharField(blank=True, max_length=200, null=True)),
                ('tstamp', models.DateTimeField()),
                ('args', models.TextField(blank=True, null=True)),
                ('kwargs', models.TextField(blank=True, null=True)),
                ('eta', models.DateTimeField(blank=True, null=True)),
                ('expires', models.DateTimeField(blank=True, null=True)),
                ('result', models.TextField(blank=True, null=True)),
                ('traceback', models.TextField(blank=True, null=True)),
                ('runtime', models.FloatField(blank=True, null=True)),
                ('retries', models.IntegerField()),
                ('hidden', models.IntegerField()),
            ],
            options={
                'db_table': 'djcelery_taskstate',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjceleryWorkerstate',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('hostname', models.CharField(max_length=255, unique=True)),
                ('last_heartbeat', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'db_table': 'djcelery_workerstate',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjkombuMessage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('visible', models.IntegerField()),
                ('sent_at', models.DateTimeField(blank=True, null=True)),
                ('payload', models.TextField()),
            ],
            options={
                'db_table': 'djkombu_message',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjkombuQueue',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, unique=True)),
            ],
            options={
                'db_table': 'djkombu_queue',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='MetamapEtl',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('query', models.CharField(max_length=2000)),
                ('meta', models.CharField(max_length=20)),
                ('tbl_name', models.CharField(max_length=100)),
                ('author', models.CharField(blank=True, max_length=20, null=True)),
                ('pre_sql', models.CharField(blank=True, max_length=2000, null=True)),
                ('ctime', models.DateTimeField()),
                ('priority', models.IntegerField()),
                ('on_schedule', models.IntegerField()),
                ('valid', models.IntegerField()),
                ('setting', models.CharField(max_length=200)),
                ('variables', models.CharField(max_length=200)),
            ],
            options={
                'db_table': 'metamap_etl',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='MetamapExecutions',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('log_location', models.CharField(max_length=120)),
                ('start_time', models.DateTimeField()),
                ('end_time', models.DateTimeField(blank=True, null=True)),
                ('status', models.IntegerField()),
            ],
            options={
                'db_table': 'metamap_executions',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='MetamapMeta',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('meta', models.CharField(max_length=30, unique=True)),
                ('db', models.CharField(max_length=30)),
                ('settings', models.CharField(blank=True, max_length=300, null=True)),
                ('type', models.IntegerField()),
                ('ctime', models.DateTimeField()),
                ('valid', models.IntegerField()),
            ],
            options={
                'db_table': 'metamap_meta',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='MetamapTblblood',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tbl_name', models.CharField(max_length=100)),
                ('parent_tbl', models.CharField(max_length=30)),
                ('related_etl_id', models.IntegerField()),
                ('ctime', models.DateTimeField()),
                ('valid', models.IntegerField()),
            ],
            options={
                'db_table': 'metamap_tblblood',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='PeriodicTask',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, unique=True)),
                ('task', models.CharField(max_length=200)),
                ('args', models.TextField(default='[]')),
                ('kwargs', models.TextField(default='{}')),
                ('queue', models.CharField(blank=True, max_length=200, null=True)),
                ('exchange', models.CharField(blank=True, max_length=200, null=True)),
                ('routing_key', models.CharField(blank=True, max_length=200, null=True)),
                ('expires', models.DateTimeField(blank=True, null=True)),
                ('enabled', models.IntegerField(default=1)),
                ('last_run_at', models.DateTimeField(blank=True, null=True)),
                ('total_run_count', models.IntegerField(default=0)),
                ('date_changed', models.DateTimeField(default=django.utils.timezone.now)),
                ('description', models.TextField()),
            ],
            options={
                'db_table': 'djcelery_periodictask',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='WillDependencyTask',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, unique=True)),
                ('schedule', models.IntegerField(default=1)),
                ('valid', models.IntegerField(default=1)),
                ('ctime', models.DateTimeField(default=django.utils.timezone.now)),
                ('utime', models.DateTimeField(null=True)),
                ('variables', models.TextField()),
                ('desc', models.TextField()),
                ('rel_id', models.IntegerField(help_text='ETL or Email id', null=True)),
                ('type', models.IntegerField(default=1, help_text='1 ETL; 2 EMAIL;')),
            ],
            options={
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('phone', models.BigIntegerField(default=110, max_length=11)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]
